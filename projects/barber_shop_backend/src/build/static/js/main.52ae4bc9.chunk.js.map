{"version":3,"sources":["pages/HomePage.js","pages/BarberSignUp.js","App.js","serviceWorker.js","index.js"],"names":["HomePage","className","type","to","BarberSignUp","useState","firstName","setFirstName","lastName","setLastName","email","setEmail","password","setPassword","addBarber","event","a","preventDefault","console","log","Form","onSubmit","Row","Group","onChange","target","value","as","Col","md","Label","Control","placeholder","controlId","Text","Button","variant","App","id","path","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.52ae4bc9.chunk.js","sourcesContent":["import React from 'react';\r\nimport {AwesomeButton, AwesomeButtonProgress } from 'react-awesome-button';\r\nimport \"react-awesome-button/dist/styles.css\";\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst HomePage = () => (\r\n<>   \r\n    <h1>Hello, welcome to the Atlanta Virtual Barber Shop!</h1>\r\n    <div className=\"test\"> \r\n    <AwesomeButton  \r\n    type=\"primary\">\r\n       <Link className=\"link\" to=\"/barber-signup\">Barber Sign Up</Link>\r\n    </AwesomeButton>\r\n    <AwesomeButton type=\"primary\"><Link className=\"link\" to=\"/barber-signup\">User Sign Up</Link></AwesomeButton>\r\n    \r\n    </div>\r\n    <div>\r\n    <AwesomeButton type=\"primary\"><Link className=\"link\" to=\"/barber-signup\">Loggin All Users</Link></AwesomeButton>\r\n    </div>\r\n</>\r\n)\r\n\r\n\r\nexport default HomePage;","import React, {useState, useEffect} from 'react';\r\nimport {Button, Form, Col} from 'react-bootstrap'\r\n\r\nconst BarberSignUp = () => {\r\n\r\n    const [firstName, setFirstName] = useState(\"firstName\");\r\n    const [lastName, setLastName] = useState(\"lastName\");\r\n    const [email, setEmail] = useState(\"email\");\r\n    const [password, setPassword] = useState(\"password\");\r\n    \r\n    const addBarber = async (event) => {\r\n        event.preventDefault();\r\n        console.log(firstName)\r\n        console.log(lastName)\r\n        console.log(email)\r\n        console.log(password)\r\n    }\r\n\r\n    return(\r\n    <>\r\n    <h1>Sign UP</h1>    \r\n    <div className=\"barber-signup\">\r\n    <Form onSubmit = {(event) => addBarber(event) }>\r\n        <Form.Row>\r\n        <Form.Group onChange={(event) => {setFirstName(event.target.value)}} as={Col} md=\"4\">\r\n        <Form.Label>First Name</Form.Label>\r\n        <Form.Control type=\"firstName\" placeholder=\"First Name\" />\r\n        </Form.Group>\r\n        <Form.Group onChange={(event) => {setLastName(event.target.value)}} as={Col} md=\"4\">\r\n        <Form.Label>Last Name</Form.Label>\r\n        <Form.Control type=\"lastName\" placeholder=\"Last Name\" />\r\n        </Form.Group>\r\n        \r\n        </Form.Row>\r\n        <Form.Row>\r\n        <Form.Group  onChange={(event) => {setEmail(event.target.value)}} as={Col} md=\"4\" controlId=\"formGridEmail\">\r\n        <Form.Label>Email address</Form.Label>\r\n        <Form.Control type=\"email\" placeholder=\"Example: jack@unionBarber.com\" />\r\n        <Form.Text className=\"text-muted\">\r\n            We'll never share your email with anyone else.\r\n        </Form.Text>\r\n        </Form.Group>\r\n        <Form.Group  onChange={(event) => {setPassword(event.target.value)}} as={Col} md=\"4\" controlId=\"formGridPassword\">\r\n        <Form.Label>Password</Form.Label>\r\n        <Form.Control type=\"password\" placeholder=\"Password\" />\r\n        </Form.Group>\r\n        \r\n        </Form.Row>\r\n        <div className=\"button-barber\">\r\n        <Button variant=\"primary\" type=\"submit\">\r\n        Submit\r\n        </Button>\r\n        </div>\r\n    </Form>\r\n\r\n    </div>\r\n    \r\n    </>\r\n)}\r\n\r\nexport default BarberSignUp;","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n}from 'react-router-dom';\nimport HomePage from './pages/HomePage';\nimport BarberSignUp from './pages/BarberSignUp'\nimport './App.css';\n\nfunction App() {\n  return (\n    <Router>\n\n        <div className=\"App\">\n          <div id=\"page-body\">\n            <Switch>\n              <Route path=\"/\" component={HomePage} exact />\n              <Route path=\"/barber-signup\" component={BarberSignUp} />\n            </Switch>\n          </div>\n         \n       </div>\n  \n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}